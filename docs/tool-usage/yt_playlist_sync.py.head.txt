===== HEAD: tools/yt_playlist_sync.py =====
#!/usr/bin/env python3
"""
Sync a YouTube playlist from index.json (YouTube links only).

- Creates the playlist if PLAYLIST_ID is empty.
- Adds videos in reverse chronological add-order so the playlist displays oldest->newest.
- Skips empty/missing youtube_url entries.
- Idempotent: won't re-add existing videos.

Prereqs:
  pip install google-api-python-client google-auth-oauthlib google-auth-httplib2
  client_secret.json in tools/

Usage:
  python tools/yt_playlist_sync.py --title "Chris Bache Archive — Public Talks & Interviews (2009–2025)"
  # or, if you already created a playlist and know its ID:
  python tools/yt_playlist_sync.py --playlist-id PLxxxxxxxxxxxxxxxx
"""
import argparse, json, pathlib, re, sys, datetime
from typing import List, Dict

from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials

ROOT = pathlib.Path(__file__).resolve().parents[1]
INDEX_JSON = ROOT / "index.json"
SECRETS = ROOT / "tools" / "client_secret.json"
TOKEN = ROOT / "tools" / "token.json"
SCOPES = ["https://www.googleapis.com/auth/youtube"]

YOUTUBE_ID_RE = re.compile(r"(?:v=|/shorts/|/embed/|youtu\.be/)([A-Za-z0-9_-]{11})")

def extract_video_id(url: str) -> str:
    if not url:
        return ""
    m = YOUTUBE_ID_RE.search(url)
    return m.group(1) if m else ""

def load_items() -> List[Dict]:
    with INDEX_JSON.open("r", encoding="utf-8") as f:
        items = json.load(f)
    # sort by published (oldest first), fallback minimal date
    def k(it):
        d = (it.get("published") or "").strip()
        try:
            return datetime.date.fromisoformat(d)
        except Exception:
            return datetime.date.min
    items.sort(key=k)
    return items

def auth_youtube():
    creds = None
    if TOKEN.exists():
        creds = Credentials.from_authorized_user_file(TOKEN, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh()  # type: ignore
