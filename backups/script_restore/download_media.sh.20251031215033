#!/bin/zsh
set -euo pipefail

# --- config ---
PATCH="${PATCH:-2025-10-31-bache-youtube-early}"
PATCH_JSON="${PATCH_JSON:-patches/$PATCH/work/index.patch.json}"
VID_DIR="${VID_DIR:-build/patch-preview/$PATCH/downloads/video}"
AUD_DIR="${AUD_DIR:-build/patch-preview/$PATCH/downloads/audio}"
BROWSER="${BROWSER:-chrome:Default}"
EXARGS="${EXARGS:-}"   # e.g. 'youtube:player_client=tv_embedded'

mkdir -p "$VID_DIR" "$AUD_DIR"

# prefer SABR-resistant clients first
typeset -a clients
clients=(tv_embedded tv ios android web_creator mweb web)

# format fallbacks: muxed → HLS 94/95 → best
typeset -a video_formats
video_formats=(
  "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"
  "94/best"
  "95/best"
  "best"
)

dl_video() {
  local url="$1" out="$2"
  for client in "${clients[@]}"; do
    for fmt in "${video_formats[@]}"; do
      echo "  [video] client=$client fmt=$fmt → $out"
      yt-dlp \
        -f "$fmt" \
        --continue --no-overwrites \
        --force-ipv4 --geo-bypass-country US \
        --sleep-requests 1 --min-sleep-interval 1 --max-sleep-interval 3 \
        --concurrent-fragments 1 \
        --format-sort proto:https \
        --extractor-args "youtube:player_client=$client${EXARGS:+;$EXARGS}" \
        --cookies-from-browser "$BROWSER" \
        -o "$out" "$url" && return 0
    done
  done
  return 1
}

dl_audio() {
  local url="$1" outbase="$2"   # without extension
  for client in "${clients[@]}"; do
    echo "  [audio] client=$client → ${outbase}.mp3"
    yt-dlp -x --audio-format mp3 \
      --continue --no-overwrites \
      --force-ipv4 --geo-bypass-country US \
      --sleep-requests 1 --min-sleep-interval 1 --max-sleep-interval 3 \
      --concurrent-fragments 1 \
      --format-sort proto:https \
      --extractor-args "youtube:player_client=$client${EXARGS:+;$EXARGS}" \
      --cookies-from-browser "$BROWSER" \
      -o "${outbase}.%(ext)s" "$url" && return 0
  done
  return 1
}

# iterate patch entries (supports array or {items|entries:[]})
jq -r '
  (if type=="array" then . else (.items // .entries // []) end)
  | map(select(.youtube_id and .slug))[]
  | [.youtube_id, "https://youtu.be/\(.youtube_id)", .slug] | @tsv
' "$PATCH_JSON" \
| while IFS=$'\t' read -r yid url slug; do
    [[ -z "${yid:-}" || -z "${slug:-}" ]] && continue
    echo "=== $slug ($yid) ==="

    vout="$VID_DIR/${slug}.mp4"
    aout_base="$AUD_DIR/${slug}"

    # VIDEO
    if [[ -s "$vout" ]]; then
      echo "  video exists, skip"
    else
      if ! dl_video "$url" "$vout"; then
        echo "  [WARN] video failed for $slug"
      fi
    fi

    # AUDIO
    if compgen -G "${aout_base}.mp3" > /dev/null; then
      echo "  audio exists, skip"
    else
      if ! dl_audio "$url" "$aout_base"; then
        echo "  [WARN] audio failed for $slug"
      fi
    fi

    echo "------------------------"
  done